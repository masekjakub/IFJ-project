
a
.IFJcode22
JUMP _main

######WRITE######
LABEL write
TYPE LF@writetype LF@tmpwrite
JUMPIFEQ _writeempty LF@writetype string@nil
WRITE LF@tmpwrite
POPFRAME
CREATEFRAME
RETURN
#EMPTY#
LABEL _writeempty
WRITE string@
POPFRAME
CREATEFRAME
RETURN

######READI######
LABEL readi
CREATEFRAME
DEFVAR TF@input
DEFVAR TF@input$type
READ TF@input int
TYPE TF@input$type TF@input
JUMPIFEQ _readiOk TF@input$type string@int
PUSHS nil@nil
CREATEFRAME
RETURN
LABEL _readiOk
PUSHS TF@input
CREATEFRAME
RETURN

######READF######
LABEL readf
CREATEFRAME
DEFVAR TF@input
DEFVAR TF@input$type
READ TF@input float
TYPE TF@input$type TF@input
JUMPIFEQ _readfOk TF@input$type string@float
PUSHS nil@nil
CREATEFRAME
RETURN
LABEL _readfOk
PUSHS TF@input
CREATEFRAME
RETURN

######READS######
LABEL reads
CREATEFRAME
DEFVAR TF@input
DEFVAR TF@input$type
READ TF@input string
TYPE TF@input$type TF@input
JUMPIFEQ _readsOk TF@input$type string@string
PUSHS nil@nil
CREATEFRAME
RETURN
LABEL _readsOk
PUSHS TF@input
CREATEFRAME
RETURN

######FLOATVAL######
LABEL floatval
CREATEFRAME
PUSHFRAME
DEFVAR LF@floatval
POPS LF@floatval
#CODEconvert2Type
CREATEFRAME
DEFVAR TF@%convType1
TYPE TF@%convType1 LF@floatval
JUMPIFEQ _convInt2Float1 TF@%convType1 string@int
JUMPIFEQ _convNil2Float1 TF@%convType1 string@nil
JUMP _noConv1

LABEL _convInt2Float1
INT2FLOAT LF@floatval LF@floatval
JUMP _noConv1

LABEL _convNil2Float1
MOVE LF@floatval float@0x0p+0
LABEL _noConv1

PUSHS LF@floatval
POPFRAME
RETURN

######INTVAL######
LABEL intval
CREATEFRAME
PUSHFRAME
DEFVAR LF@intval
POPS LF@intval
#CODEconvert2Type
CREATEFRAME
DEFVAR TF@%convType2
TYPE TF@%convType2 LF@intval
JUMPIFEQ _convFloat2Int2 TF@%convType2 string@float
JUMPIFEQ _convNil2Int2 TF@%convType2 string@nil
JUMP _noConv2

LABEL _convFloat2Int2
FLOAT2INT LF@intval LF@intval
JUMP _noConv2

LABEL _convNil2Int2
MOVE LF@intval int@0
LABEL _noConv2

PUSHS LF@intval
POPFRAME
RETURN

######STRVAL######
LABEL strval
CREATEFRAME
PUSHFRAME
DEFVAR LF@strval
POPS LF@strval
#CODEconvert2Type
CREATEFRAME
DEFVAR TF@%convType3
TYPE TF@%convType3 LF@strval
JUMPIFEQ _convNil2String3 TF@%convType3 string@nil
JUMP _noConv3

LABEL _convNil2String3
MOVE LF@strval string@
JUMP _noConv3
LABEL _noConv3

PUSHS LF@strval
POPFRAME
RETURN

######STRLEN######
LABEL strlen
CREATEFRAME
PUSHFRAME
DEFVAR LF@string
POPS LF@string
DEFVAR LF@strlen
STRLEN LF@strlen LF@string
PUSHS LF@strlen
POPFRAME
RETURN

######SUBSTRING######
LABEL substring
CREATEFRAME
PUSHFRAME
DEFVAR LF@j
POPS LF@j
DEFVAR LF@i
POPS LF@i
DEFVAR LF@string
POPS LF@string
DEFVAR LF@done
#Check NULL return
LT LF@done LF@i int@0
JUMPIFEQ _substringIsNull LF@done bool@true
LT LF@done LF@j int@0
JUMPIFEQ _substringIsNull LF@done bool@true
GT LF@done LF@i LF@j
JUMPIFEQ _substringIsNull LF@done bool@true
DEFVAR LF@stringlen
STRLEN LF@stringlen LF@string
LT LF@done LF@i LF@stringlen
JUMPIFNEQ _substringIsNull LF@done bool@true #NOT i < strlen
GT LF@done LF@j LF@stringlen
JUMPIFEQ _substringIsNull LF@done bool@true
JUMP _substringNotNull
LABEL _substringIsNull
PUSHS nil@nil
POPFRAME
RETURN
LABEL _substringNotNull
#Create substring
DEFVAR LF@retString
MOVE LF@retString string@
DEFVAR LF@curChar
LABEL _substringNextChar #While i < j
LT LF@done LF@i LF@j
JUMPIFNEQ _substringEnd LF@done bool@true # NOT i < j
GETCHAR LF@curChar LF@string LF@i
CONCAT LF@retString LF@retString LF@curChar
ADD LF@i LF@i int@1
JUMP _substringNextChar
LABEL _substringEnd
PUSHS LF@retString
POPFRAME
RETURN

######ORD######
LABEL ord
CREATEFRAME
PUSHFRAME
DEFVAR LF@ordV
POPS LF@ordV
JUMPIFNEQ _%%ordRetChar LF@ordV string@
PUSHS int@0
POPFRAME
RETURN
LABEL _%%ordRetChar
STRI2INT LF@ordV LF@ordV int@0
PUSHS LF@ordV
POPFRAME
RETURN

######CHR######
LABEL chr
CREATEFRAME
PUSHFRAME
DEFVAR LF@chrV
POPS LF@chrV
INT2CHAR LF@chrV LF@chrV
PUSHS LF@chrV
POPFRAME
RETURN

######convert2BiggestType######
LABEL _convert2BiggestType
CREATEFRAME
DEFVAR TF@a
DEFVAR TF@b
POPS TF@b
POPS TF@a
DEFVAR TF@atype
DEFVAR TF@btype
TYPE TF@atype TF@a
TYPE TF@btype TF@b
JUMPIFNEQ _aNotNil TF@atype string@nil
MOVE TF@a int@0
TYPE TF@atype TF@a
JUMPIFNEQ _aNotNil TF@btype string@string
MOVE TF@a string@
TYPE TF@atype TF@a
LABEL _aNotNil
TYPE TF@btype TF@b
JUMPIFNEQ _bNotNil TF@btype string@nil
MOVE TF@b int@0
TYPE TF@btype TF@b
JUMPIFNEQ _bNotNil TF@atype string@string
MOVE TF@b string@
TYPE TF@btype TF@b
LABEL _bNotNil
JUMPIFEQ _sameType TF@atype TF@btype
JUMPIFEQ _convToString TF@atype string@string
JUMPIFEQ _convToString TF@btype string@string
JUMPIFEQ _bConvToFloat TF@atype string@float
JUMPIFEQ _aConvToFloat TF@btype string@float
LABEL _convToString
DPRINT string@Implicit\032convesion\032to\032string\032not\032supported!\010
EXIT int@7
JUMP _sameType
LABEL _aConvToFloat
INT2FLOAT TF@a TF@a
JUMP _sameType
LABEL _bConvToFloat
INT2FLOAT TF@b TF@b
JUMP _sameType
LABEL _sameType
PUSHS TF@a
PUSHS TF@b
CREATEFRAME
RETURN
######MAIN######
LABEL _main
DEFVAR GF@void
CREATEFRAME
PUSHFRAME
PUSHS string@a
#CODEdefVar
DEFVAR LF@$x
#CODEassign
POPS LF@$x
CREATEFRAME
DEFVAR TF@$xType
TYPE TF@$xType LF@$x
JUMPIFNEQ _varInitOk1 TF@$xType string@
DPRINT string@Variable\032$x\032is\032undefined\032on\032line\0324!\010
EXIT int@5
LABEL _varInitOk1
CREATEFRAME
PUSHS LF@$x
#CODEfuncCall
CALL ord
#CODEassign
POPS LF@$x
PUSHS string@
#CODEdefVar
DEFVAR LF@$y
#CODEassign
POPS LF@$y
CREATEFRAME
DEFVAR TF@$yType
TYPE TF@$yType LF@$y
JUMPIFNEQ _varInitOk2 TF@$yType string@
DPRINT string@Variable\032$y\032is\032undefined\032on\032line\0326!\010
EXIT int@5
LABEL _varInitOk2
CREATEFRAME
PUSHS LF@$y
#CODEfuncCall
CALL ord
#CODEassign
POPS LF@$y
CREATEFRAME
DEFVAR TF@$xType
TYPE TF@$xType LF@$x
JUMPIFNEQ _varInitOk3 TF@$xType string@
DPRINT string@Variable\032$x\032is\032undefined\032on\032line\0327!\010
EXIT int@5
LABEL _varInitOk3
CREATEFRAME
PUSHS LF@$x
CREATEFRAME
DEFVAR TF@$yType
TYPE TF@$yType LF@$y
JUMPIFNEQ _varInitOk4 TF@$yType string@
DPRINT string@Variable\032$y\032is\032undefined\032on\032line\0327!\010
EXIT int@5
LABEL _varInitOk4
CREATEFRAME
PUSHS LF@$y
#CODEcallWrite
CREATEFRAME
DEFVAR TF@tmpwrite
DEFVAR TF@writetype
POPS TF@tmpwrite
PUSHFRAME
#CODEcallWrite
CREATEFRAME
DEFVAR TF@tmpwrite
DEFVAR TF@writetype
POPS TF@tmpwrite
PUSHFRAME
CALL write
PUSHS nil@nil
CALL write
POPS GF@void

EXIT int@0
